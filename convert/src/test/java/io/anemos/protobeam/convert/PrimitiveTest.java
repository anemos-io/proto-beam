package io.anemos.protobeam.convert;/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import com.google.protobuf.ByteString;
import com.google.protobuf.Descriptors;
import io.anemos.examples.Message;
import io.anemos.examples.MessagePrimitive;
import org.junit.Before;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class PrimitiveTest extends AbstractProtoBigQueryTest {

    private ProtoBigQueryExecutionPlan plan;


    @Before
    public void setup() {
        MessagePrimitive x = MessagePrimitive.newBuilder()
                .build();
        plan = new ProtoBigQueryExecutionPlan(x);

        byte[] so = SerializeTest.serializeToByteArray(plan);
        plan = (ProtoBigQueryExecutionPlan) SerializeTest.deserializeFromByteArray(so, "");

    }

    @Test
    public void testSchema() {
        MessagePrimitive x = MessagePrimitive.newBuilder().build();
        Descriptors.Descriptor descriptor = x.getDescriptorForType();

        String modelRef = "{fields=[{name=primitive_double, type=FLOAT64}, {name=primitive_float, type=FLOAT64}, {name=primitive_int32, type=INT64}, {name=primitive_int64, type=INT64}, {name=primitive_uint32, type=INT64}, {name=primitive_uint64, type=INT64}, {name=primitive_sint32, type=INT64}, {name=primitive_sint64, type=INT64}, {name=primitive_fixed32, type=INT64}, {name=primitive_fixed64, type=INT64}, {name=primitive_sfixed32, type=INT64}, {name=primitive_sfixed64, type=INT64}, {name=primitive_bool, type=BOOL}, {name=primitive_string, type=STRING}, {name=primitive_bytes, type=BYTES}]}";
        SchemaProtoToBigQueryModel model = new SchemaProtoToBigQueryModel();
        assertEquals(modelRef, model.getSchema(descriptor).toString());

        String apiRef = "Schema{fields=[Field{name=primitive_double, value=Type{value=FLOAT, fields=null}, mode=null, description=null}, Field{name=primitive_float, value=Type{value=FLOAT, fields=null}, mode=null, description=null}, Field{name=primitive_int32, value=Type{value=INTEGER, fields=null}, mode=null, description=null}, Field{name=primitive_int64, value=Type{value=INTEGER, fields=null}, mode=null, description=null}, Field{name=primitive_uint32, value=Type{value=INTEGER, fields=null}, mode=null, description=null}, Field{name=primitive_uint64, value=Type{value=INTEGER, fields=null}, mode=null, description=null}, Field{name=primitive_sint32, value=Type{value=INTEGER, fields=null}, mode=null, description=null}, Field{name=primitive_sint64, value=Type{value=INTEGER, fields=null}, mode=null, description=null}, Field{name=primitive_fixed32, value=Type{value=INTEGER, fields=null}, mode=null, description=null}, Field{name=primitive_fixed64, value=Type{value=INTEGER, fields=null}, mode=null, description=null}, Field{name=primitive_sfixed32, value=Type{value=INTEGER, fields=null}, mode=null, description=null}, Field{name=primitive_sfixed64, value=Type{value=INTEGER, fields=null}, mode=null, description=null}, Field{name=primitive_bool, value=Type{value=BOOLEAN, fields=null}, mode=null, description=null}, Field{name=primitive_string, value=Type{value=STRING, fields=null}, mode=null, description=null}, Field{name=primitive_bytes, value=Type{value=BYTES, fields=null}, mode=null, description=null}]}";
        SchemaProtoToBigQueryApi api = new SchemaProtoToBigQueryApi();
        assertEquals(apiRef, api.getSchema(descriptor).toString());
    }

    @Test
    public void booleanFieldTest() throws Exception {
        MessagePrimitive protoIn = MessagePrimitive.newBuilder()
                .setPrimitiveBool(true)
                .build();
        testPingPong(plan, protoIn);
    }

    @Test
    public void stringFieldTest() throws Exception {
        MessagePrimitive protoIn = MessagePrimitive.newBuilder()
                .setPrimitiveString("fooBar")
                .build();
        testPingPong(plan, protoIn);
    }

    @Test
    public void bytesFieldTest() throws Exception {
        byte[] buffer  = new byte[] {(byte) 0xCA, (byte) 0xFE, (byte) 0xBA, (byte) 0xBE };

        MessagePrimitive protoIn = MessagePrimitive.newBuilder()
                .setPrimitiveBytes(ByteString.copyFrom(buffer))
                .build();
        testPingPong(plan, protoIn);
    }
}
