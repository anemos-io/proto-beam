package io.anemos.protobeam.convert;/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import com.google.protobuf.ByteString;
import com.google.protobuf.Descriptors;
import io.anemos.protobeam.examples.ProtoBeamBasicPrimitive;
import org.junit.Before;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class PrimitiveTest extends AbstractProtoBigQueryTest {

    private ProtoTableRowExecutionPlan plan;


    @Before
    public void setup() {
        ProtoBeamBasicPrimitive x = ProtoBeamBasicPrimitive.newBuilder()
                .build();
        plan = new ProtoTableRowExecutionPlan(x);

        byte[] so = SerializeTest.serializeToByteArray(plan);
        plan = (ProtoTableRowExecutionPlan) SerializeTest.deserializeFromByteArray(so, "");
    }

    @Test
    public void testSchema() {
        ProtoBeamBasicPrimitive x = ProtoBeamBasicPrimitive.newBuilder().build();
        Descriptors.Descriptor descriptor = x.getDescriptorForType();

        String modelRef = "{fields=[" +
                "{mode=REQUIRED, name=test_name, type=STRING}," +
                " {mode=REQUIRED, name=test_index, type=INT64}," +
                " {mode=REQUIRED, name=primitive_double, type=FLOAT64}," +
                " {mode=REQUIRED, name=primitive_float, type=FLOAT64}," +
                " {mode=REQUIRED, name=primitive_int32, type=INT64}," +
                " {mode=REQUIRED, name=primitive_int64, type=INT64}," +
                " {mode=REQUIRED, name=primitive_uint32, type=INT64}," +
                " {mode=REQUIRED, name=primitive_uint64, type=INT64}," +
                " {mode=REQUIRED, name=primitive_sint32, type=INT64}," +
                " {mode=REQUIRED, name=primitive_sint64, type=INT64}," +
                " {mode=REQUIRED, name=primitive_fixed32, type=INT64}," +
                " {mode=REQUIRED, name=primitive_fixed64, type=INT64}," +
                " {mode=REQUIRED, name=primitive_sfixed32, type=INT64}," +
                " {mode=REQUIRED, name=primitive_sfixed64, type=INT64}," +
                " {mode=REQUIRED, name=primitive_bool, type=BOOL}," +
                " {mode=REQUIRED, name=primitive_string, type=STRING}," +
                " {mode=REQUIRED, name=primitive_bytes, type=BYTES}]}";
        SchemaProtoToBigQueryModel model = new SchemaProtoToBigQueryModel();
        assertEquals(modelRef, model.getSchema(descriptor).toString());

        String apiRef = "Schema{fields=[" +
                "Field{name=test_name, type=STRING, mode=REQUIRED, description=null}, " +
                "Field{name=test_index, type=INTEGER, mode=REQUIRED, description=null}, " +
                "Field{name=primitive_double, type=FLOAT, mode=REQUIRED, description=null}, " +
                "Field{name=primitive_float, type=FLOAT, mode=REQUIRED, description=null}, " +
                "Field{name=primitive_int32, type=INTEGER, mode=REQUIRED, description=null}, " +
                "Field{name=primitive_int64, type=INTEGER, mode=REQUIRED, description=null}, " +
                "Field{name=primitive_uint32, type=INTEGER, mode=REQUIRED, description=null}, " +
                "Field{name=primitive_uint64, type=INTEGER, mode=REQUIRED, description=null}, " +
                "Field{name=primitive_sint32, type=INTEGER, mode=REQUIRED, description=null}, " +
                "Field{name=primitive_sint64, type=INTEGER, mode=REQUIRED, description=null}, " +
                "Field{name=primitive_fixed32, type=INTEGER, mode=REQUIRED, description=null}, " +
                "Field{name=primitive_fixed64, type=INTEGER, mode=REQUIRED, description=null}, " +
                "Field{name=primitive_sfixed32, type=INTEGER, mode=REQUIRED, description=null}, " +
                "Field{name=primitive_sfixed64, type=INTEGER, mode=REQUIRED, description=null}, " +
                "Field{name=primitive_bool, type=BOOLEAN, mode=REQUIRED, description=null}, " +
                "Field{name=primitive_string, type=STRING, mode=REQUIRED, description=null}, " +
                "Field{name=primitive_bytes, type=BYTES, mode=REQUIRED, description=null}]}";
        SchemaProtoToBigQueryApi api = new SchemaProtoToBigQueryApi();
        assertEquals(apiRef, api.getSchema(descriptor).toString());

        String ddlRef = "CREATE TABLE `test` (\n" +
                "\t`test_name` STRING NOT NULL,\n" +
                "\t`test_index` INT64 NOT NULL,\n" +
                "\t`primitive_double` FLOAT64 NOT NULL,\n" +
                "\t`primitive_float` FLOAT64 NOT NULL,\n" +
                "\t`primitive_int32` INT64 NOT NULL,\n" +
                "\t`primitive_int64` INT64 NOT NULL,\n" +
                "\t`primitive_uint32` INT64 NOT NULL,\n" +
                "\t`primitive_uint64` INT64 NOT NULL,\n" +
                "\t`primitive_sint32` INT64 NOT NULL,\n" +
                "\t`primitive_sint64` INT64 NOT NULL,\n" +
                "\t`primitive_fixed32` INT64 NOT NULL,\n" +
                "\t`primitive_fixed64` INT64 NOT NULL,\n" +
                "\t`primitive_sfixed32` INT64 NOT NULL,\n" +
                "\t`primitive_sfixed64` INT64 NOT NULL,\n" +
                "\t`primitive_bool` BOOL NOT NULL,\n" +
                "\t`primitive_bytes` BYTES NOT NULL\n" +
                ")\n";
        SchemaProtoToBigQueryDDL ddl = new SchemaProtoToBigQueryDDL();
        assertEquals(ddlRef, ddl.getSchema(descriptor).setTableName("test").toString());
    }

    @Test
    public void booleanFieldTest() {
        ProtoBeamBasicPrimitive protoIn = ProtoBeamBasicPrimitive.newBuilder()
                .setPrimitiveBool(true)
                .build();
        testPingPong(plan, protoIn);
    }

    @Test
    public void floatFieldTest() {
        ProtoBeamBasicPrimitive protoIn = ProtoBeamBasicPrimitive.newBuilder()
                .setPrimitiveFloat(45.56f)
                .build();
        testPingPong(plan, protoIn);
    }

    @Test
    public void doubleFieldTest() {
        ProtoBeamBasicPrimitive protoIn = ProtoBeamBasicPrimitive.newBuilder()
                .setPrimitiveDouble(12.45)
                .build();
        testPingPong(plan, protoIn);
    }

    @Test
    public void intFieldTest() {
        ProtoBeamBasicPrimitive protoIn = ProtoBeamBasicPrimitive.newBuilder()
                .setPrimitiveInt32(42)
                .build();
        testPingPong(plan, protoIn);
    }

    @Test
    public void longFieldTest() {
        ProtoBeamBasicPrimitive protoIn = ProtoBeamBasicPrimitive.newBuilder()
                .setPrimitiveInt64(42)
                .build();
        testPingPong(plan, protoIn);
    }

    @Test
    public void stringFieldTest() {
        ProtoBeamBasicPrimitive protoIn = ProtoBeamBasicPrimitive.newBuilder()
                .setPrimitiveString("fooBar")
                .build();
        testPingPong(plan, protoIn);
    }

    @Test
    public void bytesFieldTest() {
        byte[] buffer  = new byte[] {(byte) 0xCA, (byte) 0xFE, (byte) 0xBA, (byte) 0xBE };

        ProtoBeamBasicPrimitive protoIn = ProtoBeamBasicPrimitive.newBuilder()
                .setPrimitiveBytes(ByteString.copyFrom(buffer))
                .build();
        testPingPong(plan, protoIn);
    }
}
